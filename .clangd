# .clangd configuration file for OS Development
# This file helps clangd understand your project's structure, especially
# when you have custom compiler flags and include directories, which is
# common in kernel and systems programming.

# For clangd to work best, you should generate a `compile_commands.json` file
# with your build system (e.g., `cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..`).
# This file provides clangd with the exact compiler commands used to build
# your project. This configuration will then supplement those commands.

# Apply the following settings to all C and C++ source/header files.
If:
  PathMatch: .*\.(c|cpp|h|hpp)$

  # --- Compilation Flags ---
  # Add or remove compiler flags. These are combined with the flags from
  # your `compile_commands.json` file.
  CompileFlags:
    # Add these flags to every file clangd parses.
    # This is the most important section for an OS project.
    Add:
      # Add your project's include directories.
      # Adjust these paths to match your project structure.
      - -Iinclude
      - -Isrc/include

      # Common flags for OS development.
      - -ffreestanding      # Don't assume a standard library is present.
      - -nostdlib           # Don't link against the standard library.
      - -Wall               # Enable all standard warnings.
      - -Wextra             # Enable extra warnings.
      - -Wpedantic          # Issue all warnings demanded by strict ISO C/C++.

      # Example of a target-specific flag. Uncomment and adjust if needed.
      # - -target=x86_64-elf

      # You can define preprocessor macros here as well.
      # - -D__MY_KERNEL__
      # - -DDEBUG

    # Remove flags that might confuse clangd or are not useful for static analysis.
    # Remove: [-O2, -O3]

# --- Indexing ---
# Controls how clangd builds its index for cross-references ("Find All References").
Index:
  # Index the whole project in the background. This provides the best experience.
  Background: Build

# --- Diagnostics ---
# Fine-tune how clangd displays errors and warnings.
Diagnostics:
  # You can suppress specific warnings if they are too noisy for your project.
  # For example, to hide the "unused-function" warning:
  # Unused: None
  ClangTidy:
    Add: [performance-*, bugprone-*]
    Remove: [bugprone-easily-swappable-parameters]

# --- Inlay Hints ---
# Show parameter names, types, etc., directly in your code.
# These are disabled by default. Uncomment to enable.
InlayHints:
  Enabled: true
  ParameterNames: true
  DeducedTypes: true
...
